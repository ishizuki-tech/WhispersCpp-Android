# ============================================================
# ✅ WhispersCpp-Android — Full CI/CD Automation (Final Stable v3)
# ------------------------------------------------------------
# • Code Review → Build → Release → Pages Deploy
# • QR codes + SHA256 hashes + Release Notes
# • Static SDK license + AndroidX fix + Build cache
# ============================================================

name: Android CI & Release (Full + QR + Hash + Notes)

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:
    inputs:
      module:
        description: "Android module to build (e.g. app)"
        default: "app"
      create_release:
        description: "Publish GitHub Release with built artifacts"
        type: boolean
        default: true
      ndk_version:
        description: "Android NDK version"
        default: "28.0.12433566"

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

defaults:
  run:
    shell: bash

jobs:
  # ============================================================
  # 🧠 Code Review — Lint & Tests
  # ============================================================
  review:
    name: Code Review (Lint & Unit Tests)
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Run Lint
        id: lint
        run: ./gradlew lintDebug || true

      - name: Run Unit Tests
        id: test
        run: ./gradlew testDebugUnitTest || true

      - name: Upload Lint Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: app/build/reports/lint-results.html

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: "🧩 **Code Review Summary**"
          message: |
            ✅ Lint: ${{ steps.lint.outcome }}
            ✅ Unit Tests: ${{ steps.test.outcome }}
            🔗 [CI Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================
  # 🏗️ Build & Release — Signed Artifacts
  # ============================================================
  build:
    name: Build & Release
    runs-on: ubuntu-latest
    needs: review
    timeout-minutes: 70

    env:
      MODULE_PATH: ${{ inputs.module || 'app' }}
      ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

    steps:
      - name: Checkout repository (LFS + submodules)
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0
          submodules: recursive

      - name: Pre-accept Android SDK licenses
        run: |
          mkdir -p "$ANDROID_SDK_ROOT/licenses"
          echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > "$ANDROID_SDK_ROOT/licenses/android-sdk-license"
          echo "✅ Licenses pre-accepted."

      - name: Write gradle.properties (AndroidX fix)
        run: |
          mkdir -p "$HOME/.gradle"
          cat > "$HOME/.gradle/gradle.properties" <<'PROPS'
          android.useAndroidX=true
          android.enableJetifier=true
          org.gradle.jvmargs=-Xmx4g -Dfile.encoding=UTF-8
          org.gradle.parallel=true
          org.gradle.configureondemand=true
          org.gradle.caching=true
          PROPS
          echo "✅ gradle.properties written (AndroidX enabled)."

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Install Android SDK & NDK
        uses: android-actions/setup-android@v3
        with:
          ndk-version: ${{ inputs.ndk_version }}

      - name: Install platforms & tools
        run: |
          sdkmanager --install "platforms;android-35" "build-tools;35.0.0" "platform-tools" || true
          yes | sdkmanager --licenses || true
          echo "✅ Android SDK/NDK setup complete."

      - name: Gradle + NDK Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            app/.cxx
            nativelib/.cxx
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/CMakeLists.txt', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Decode keystore
        if: env.ANDROID_KEYSTORE_BASE64 != ''
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > keystore.jks
          echo "ANDROID_KEYSTORE_FILE=$PWD/keystore.jks" >> $GITHUB_ENV

      - name: Build Release
        run: |
          echo "🚀 Building module: $MODULE_PATH"
          ./gradlew :${{ env.MODULE_PATH }}:clean :${{ env.MODULE_PATH }}:assembleRelease :${{ env.MODULE_PATH }}:bundleRelease --stacktrace --info --no-daemon

      - name: Collect Outputs
        id: collect
        run: |
          ROOT="${MODULE_PATH}/build/outputs"
          find "$ROOT" -type f \( -name '*.apk' -o -name '*.aab' \) > files.txt
          cat files.txt
          echo "files<<EOF" >> $GITHUB_OUTPUT
          cat files.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: ${{ steps.collect.outputs.files }}
          retention-days: 14

      - name: Extract versionName
        id: version
        run: |
          FILE="${MODULE_PATH}/build.gradle.kts"
          VERSION=$(grep -E 'versionName' "$FILE" | sed -E 's/.*\"([^\"]+)\".*/\1/' | head -n1 || echo "0.0.0")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Tag + Release Notes
        id: release
        run: |
          TS=$(date '+%Y%m%d-%H%M')
          TAG="v${{ steps.version.outputs.version }}-${TS}"
          NOTES=$(git log -10 --pretty='* %s (%an)')
          {
            echo "tag=$TAG"
            echo "body<<EOF"
            echo "## What's Changed"
            echo "$NOTES"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Publish GitHub Release
        if: ${{ inputs.create_release }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release.outputs.tag }}
          name: "WhispersCpp Release ${{ steps.version.outputs.version }}"
          body: ${{ steps.release.outputs.body }}
          files: ${{ steps.collect.outputs.files }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================
  # 🌐 GitHub Pages — QR + Hash + Notes
  # ============================================================
  pages:
    name: Publish GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    if: ${{ inputs.create_release }}
    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages

      - name: Generate downloads index (QR + Hash + Notes)
        run: |
          mkdir -p downloads
          NOTES_FILE="downloads/release_notes.txt"
          echo "## What's Changed" > "$NOTES_FILE"
          git log -10 --pretty='* %s (%an)' >> "$NOTES_FILE"

          cat > downloads/index.html <<'HTML'
          <!DOCTYPE html><html lang="en"><head><meta charset="UTF-8">
          <meta name="viewport" content="width=device-width,initial-scale=1">
          <title>WhispersCpp-Android Downloads</title>
          <style>
          body{font-family:Segoe UI,Roboto,Helvetica,Arial,sans-serif;background:#f9fafb;margin:0;padding:2rem;color:#333}
          .card{background:#fff;border-radius:12px;box-shadow:0 2px 8px rgba(0,0,0,.08);padding:1.5rem;margin:1.5rem auto;max-width:760px}
          .file-entry{display:flex;align-items:center;justify-content:space-between;flex-wrap:wrap;padding:.8rem 0;border-bottom:1px solid #eee}
          a.download{text-decoration:none;color:#0078d4;font-weight:500}img.qr{width:100px;height:100px}code.hash{font-size:.8rem;background:#f1f3f4;padding:2px 6px;border-radius:4px}
          </style></head><body>
          <h1>📦 WhispersCpp-Android Downloads</h1>
          <p>Generated: $(date '+%Y-%m-%d %H:%M')</p>
          <div class="card">
          HTML

          for f in $(find $GITHUB_WORKSPACE -type f \( -name "*.apk" -o -name "*.aab" \) 2>/dev/null || true); do
            NAME=$(basename "$f")
            SIZE=$(du -h "$f" | cut -f1)
            SHA=$(sha256sum "$f" | cut -d' ' -f1)
            URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/downloads/$NAME"
            QR="https://api.qrserver.com/v1/create-qr-code/?size=100x100&data=$URL"
            echo "<div class='file-entry'><div><a class='download' href='$NAME'>$NAME</a><div style='color:#999;'>($SIZE)</div><div><code class='hash'>$SHA</code></div></div><img class='qr' src='$QR'></div>" >> downloads/index.html
          done

          echo "</div><div class='card'><h2>Release Notes</h2><pre>" >> downloads/index.html
          cat "$NOTES_FILE" >> downloads/index.html
          echo "</pre></div><footer>WhispersCpp-Android CI © $(date '+%Y')</footer></body></html>" >> downloads/index.html

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: downloads
          publish_branch: gh-pages
          commit_message: "Auto-update downloads index ($(date '+%Y-%m-%d %H:%M'))"
