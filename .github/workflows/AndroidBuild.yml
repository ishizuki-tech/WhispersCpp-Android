name: Android CI & Release (Final Stable)

on:
  workflow_dispatch:
    inputs:
      module:
        description: "Android module to build (e.g. app)"
        default: "app"
      create_release:
        description: "Publish GitHub Release with built artifacts"
        type: boolean
        default: true
      ndk_version:
        description: "Android NDK version"
        default: "28.0.12433566"

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    env:
      MODULE_PATH: ${{ inputs.module || 'app' }}
      ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      ORG_GRADLE_PROJECT_releaseStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      ORG_GRADLE_PROJECT_releaseKeyAlias: ${{ secrets.ANDROID_KEY_ALIAS }}
      ORG_GRADLE_PROJECT_releaseKeyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}

    steps:
      # =======================================================
      # ‚úÖ Checkout source & submodules
      # =======================================================
      - name: Checkout source (with submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.GH_TOKEN }}

      - name: Initialize & verify submodules
        run: |
          set -e
          git config --global --add safe.directory '*'
          git submodule sync --recursive || true
          git submodule update --init --recursive || true

          if [[ ! -f nativelib/whisper.cpp/src/whisper.cpp ]]; then
            echo "::warning::Submodule whisper.cpp missing, cloning manually..."
            rm -rf nativelib/whisper.cpp
            git clone --depth=1 https://github.com/ggml-org/whisper.cpp.git nativelib/whisper.cpp
          fi

          echo "üß± whisper.cpp HEAD:"
          (cd nativelib/whisper.cpp && git rev-parse --short HEAD || echo "no git repo")

      # =======================================================
      # üß© Patch whisper.cpp for Android CPU-only
      # =======================================================
      - name: Prune unsupported ggml backends
        run: |
          echo "üßπ Removing non-Android ggml backends..."
          rm -rf nativelib/whisper.cpp/ggml/src/ggml-{cuda,metal,cann,opencl,blas} || true
          echo "‚úÖ CPU-only configuration ready."
          ls -1 nativelib/whisper.cpp/ggml/src || true

      # =======================================================
      # üîß Android / Java Environment
      # =======================================================
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - name: Install Android SDK & NDK
        uses: android-actions/setup-android@v3
        with:
          ndk-version: ${{ inputs.ndk_version }}

      - name: Install Android build tools (safe)
        run: |
          echo "üì¶ Installing Android SDK components..."
          sdkmanager --install "platforms;android-35" "build-tools;35.0.0" "platform-tools" || true
          yes | sdkmanager --licenses > /dev/null 2>&1 || true
          echo "‚úÖ Android SDK/NDK installation complete (no pipe error)."

      - name: Print Environment Diagnostics
        run: |
          echo "JAVA_HOME=$JAVA_HOME"
          echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME"
          echo "PATH=$PATH"

      # =======================================================
      # üß∞ Gradle Setup
      # =======================================================
      - name: Configure Gradle cache
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-strategy: gradle-user-home

      - name: Write gradle.properties
        run: |
          mkdir -p "$HOME/.gradle"
          cat > "$HOME/.gradle/gradle.properties" <<'PROPS'
          android.useAndroidX=true
          android.enableJetifier=true
          gh.owner=ishizuki-tech
          gh.repo=WhispersCpp-Android
          gh.token=${GH_TOKEN}
          org.gradle.daemon=false
          org.gradle.parallel=true
          org.gradle.configureondemand=true
          org.gradle.jvmargs=-Xmx4g -Dfile.encoding=UTF-8
          PROPS
          echo "‚úÖ gradle.properties configured."

      # =======================================================
      # üîê Keystore
      # =======================================================
      - name: Decode signing keystore
        if: ${{ env.ANDROID_KEYSTORE_BASE64 != '' }}
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > keystore.jks
          echo "ANDROID_KEYSTORE_FILE=$PWD/keystore.jks" >> $GITHUB_ENV
          echo "‚úÖ Keystore decoded."

      # =======================================================
      # üß© Verify JNI structure
      # =======================================================
      - name: Verify whisper.cpp JNI
        run: |
          echo "üîé Checking JNI paths..."
          find nativelib/src/main -maxdepth 5 -type f \( -name 'CMakeLists.txt' -o -name '*.cpp' \) | head -n 10
          if [[ ! -f nativelib/src/main/jni/whisper/CMakeLists.txt ]]; then
            echo "::error::Missing JNI CMakeLists.txt"
            exit 1
          fi
          echo "‚úÖ JNI structure verified."

      # =======================================================
      # üß† Build Project
      # =======================================================
      - name: Print Gradle projects
        run: ./gradlew projects --no-daemon

      - name: Build release artifacts
        run: |
          set -e
          echo "üöÄ Building Android module: $MODULE_PATH"
          ./gradlew :${MODULE_PATH}:assembleRelease :${MODULE_PATH}:bundleRelease --stacktrace --info
          echo "‚úÖ Build finished successfully."

      # =======================================================
      # üì¶ Collect build outputs (Safe)
      # =======================================================
      - name: Collect build outputs
        id: collect
        run: |
          set -e
          ROOT="${MODULE_PATH}/build/outputs"
          echo "üì¶ Scanning build outputs under $ROOT ..."
          APKs=$(find "$ROOT" -type f -name '*.apk' | sort || true)
          AABs=$(find "$ROOT" -type f -name '*.aab' | sort || true)
          MAPs=$(find "${MODULE_PATH}/build/outputs/mapping" -type f -name 'mapping.txt' 2>/dev/null | sort || true)

          echo "Found APKs:"; echo "$APKs"
          echo "Found AABs:"; echo "$AABs"
          echo "Found MAPs:"; echo "$MAPs"

          {
            echo "apk_list<<EOF"
            echo "${APKs:-}"
            echo "EOF"
            echo "aab_list<<EOF"
            echo "${AABs:-}"
            echo "EOF"
            echo "map_list<<EOF"
            echo "${MAPs:-}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
          echo "‚úÖ Outputs exported safely."

      - name: Debug collected outputs
        run: |
          echo "APKs: ${{ steps.collect.outputs.apk_list }}"
          echo "AABs: ${{ steps.collect.outputs.aab_list }}"
          echo "MAPs: ${{ steps.collect.outputs.map_list }}"

      # =======================================================
      # ‚òÅÔ∏è Upload artifacts
      # =======================================================
      - name: Upload APKs
        if: ${{ steps.collect.outputs.apk_list != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: ${{ steps.collect.outputs.apk_list }}
          retention-days: 14

      - name: Upload AABs
        if: ${{ steps.collect.outputs.aab_list != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: release-aab
          path: ${{ steps.collect.outputs.aab_list }}
          retention-days: 14

      # =======================================================
      # üè∑Ô∏è Version & Release
      # =======================================================
      - name: Derive version
        id: version
        run: |
          FILE="${MODULE_PATH}/build.gradle.kts"
          VERSION=$(grep -E 'versionName' "$FILE" | sed -E 's/.*"([^"]+)".*/\1/' | head -n1 || echo "0.0.0")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "‚úÖ versionName: $VERSION"

      - name: Compute release tag
        id: tag
        run: |
          TS=$(date '+%Y%m%d-%H%M')
          TAG="v${{ steps.version.outputs.version }}-${TS}"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "üè∑Ô∏è Tag: $TAG"

      - name: Prepare release notes
        id: notes
        run: |
          NOTES=$(git log -10 --pretty='* %s (%an)')
          {
            echo "body<<EOF"
            echo "## What's Changed"
            echo "$NOTES"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Publish GitHub Release
        if: ${{ inputs.create_release && (steps.collect.outputs.apk_list != '' || steps.collect.outputs.aab_list != '') }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.version.outputs.version }}
          body: ${{ steps.notes.outputs.body }}
          files: |
            ${{ steps.collect.outputs.apk_list }}
            ${{ steps.collect.outputs.aab_list }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Skip release
        if: ${{ !inputs.create_release }}
        run: echo "Release skipped."
